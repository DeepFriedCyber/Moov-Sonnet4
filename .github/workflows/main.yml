name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Shared setup job
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version=$(date +%Y.%m.%d)-${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Frontend tests
  test-frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: property-search-frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./property-search-frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./property-search-frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./property-search-frontend
        run: npm run type-check
      
      - name: Run tests with coverage
        working-directory: ./property-search-frontend
        run: npm run test:coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-search-frontend/coverage/lcov.info
          flags: frontend
      
      - name: Build application
        working-directory: ./property-search-frontend
        run: npm run build

  # API tests
  test-api:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: property-search-api/package-lock.json
      
      - name: Install dependencies
        working-directory: ./property-search-api
        run: npm ci
      
      - name: Run linting
        working-directory: ./property-search-api
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./property-search-api
        run: npm run type-check
      
      - name: Run tests with coverage
        working-directory: ./property-search-api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-with-at-least-32-characters
          EMBEDDING_SERVICE_URL: http://localhost:8001
          FRONTEND_URL: http://localhost:3000
        run: npm run test:coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-search-api/coverage/lcov.info
          flags: api
      
      - name: Build application
        working-directory: ./property-search-api
        run: npm run build

  # Embedding service tests
  test-embedding:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: property-embedding-service/requirements.txt
      
      - name: Install dependencies
        working-directory: ./property-embedding-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black isort mypy
      
      - name: Run linting
        working-directory: ./property-embedding-service
        run: |
          black --check src/
          isort --check-only src/
          mypy src/
      
      - name: Run tests with coverage
        working-directory: ./property-embedding-service
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term tests/
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-embedding-service/coverage.xml
          flags: embedding

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: |
          cd property-search-frontend && npm audit --production
          cd ../property-search-api && npm audit --production

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-api, test-embedding, security]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [frontend, api, embedding]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=${{ needs.setup.outputs.version }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./property-search-${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, setup]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_KEY }}
        run: |
          echo "$STAGING_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -o StrictHostKeyChecking=no -i deploy_key $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /opt/moov-staging
            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
          EOF

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, setup]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_KEY: ${{ secrets.PROD_KEY }}
        run: |
          echo "$PROD_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -o StrictHostKeyChecking=no -i deploy_key $PROD_USER@$PROD_HOST << 'EOF'
            cd /opt/moov-production
            
            # Blue-green deployment
            export NEW_COLOR=$(docker compose ps -q frontend-blue > /dev/null && echo "green" || echo "blue")
            export OLD_COLOR=$([ "$NEW_COLOR" = "green" ] && echo "blue" || echo "green")
            
            # Deploy new version
            docker compose up -d frontend-$NEW_COLOR api-$NEW_COLOR embedding-$NEW_COLOR
            
            # Health checks
            sleep 30
            curl -f http://frontend-$NEW_COLOR:3000/health || exit 1
            curl -f http://api-$NEW_COLOR:3001/health || exit 1
            
            # Switch traffic
            docker compose up -d traefik
            
            # Stop old version
            docker compose stop frontend-$OLD_COLOR api-$OLD_COLOR embedding-$OLD_COLOR
            docker compose rm -f frontend-$OLD_COLOR api-$OLD_COLOR embedding-$OLD_COLOR
            
            # Cleanup
            docker system prune -f
          EOF

  # E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install --with-deps
      
      - name: Run E2E tests
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}
        run: |
          cd e2e-tests
          npm install
          npm run test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/