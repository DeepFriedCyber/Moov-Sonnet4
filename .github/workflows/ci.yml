name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.9"

jobs:
  # ==========================================
  # ÔøΩ Setup & Install Dependencies
  # ==========================================
  setup:
    name: ÔøΩ Setup & Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install All Monorepo Dependencies
        run: npm ci

      - name: ÔøΩ Upload Dependencies Artifact
        uses: actions/upload-artifact@v3
        with:
          name: node-modules-and-code
          path: |
            .
            !node_modules/.cache

  # ==========================================
  # üîç Code Quality & Security
  # ==========================================
  code-quality:
    name: ÔøΩ Code Quality & Security
    runs-on: ubuntu-latest
    needs: setup # This job now depends on the setup job
    steps:
      - name: üì• Download Source Code and Dependencies
        uses: actions/download-artifact@v3
        with:
          name: node-modules-and-code
          path: .

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # The 'npm ci' step is no longer needed here

      - name: üîç Lint Check
        # The job will now fail if linting errors are found.
        run: npm run lint

      - name: üõ°Ô∏è Security Audit
        # The job will now fail if high-severity vulnerabilities are found.
        run: npm audit --audit-level=high

      - name: üìù Type Check
        # The job will now fail if type checking errors are found.
        run: npm run type-check

      - name: üîí Check for Hardcoded Secrets
        run: |
          if grep -E 'POSTGRES_PASSWORD:-|JWT_SECRET:-' docker-compose.yml; then
            echo "‚ùå FAIL: Found hardcoded secret fallbacks in docker-compose.yml."
            echo "üõ°Ô∏è Security Issue: Secrets should come from environment variables only."
            exit 1
          else
            echo "‚úÖ PASS: No hardcoded secret fallbacks found."
          fi

  # ==========================================
  # üèóÔ∏è Frontend Build & Test
  # ==========================================
  frontend-test:
    name: üèóÔ∏è Frontend Tests
    runs-on: ubuntu-latest
    needs: setup # This job now depends on the setup job

    steps:
      - name: ÔøΩ Download Source Code and Dependencies
        uses: actions/download-artifact@v3
        with:
          name: node-modules-and-code
          path: .

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # The 'npm ci' step is no longer needed here

      - name: üîç Lint Frontend
        # The job will now fail if linting errors are found.
        # Use --workspace to target the specific package
        run: npm run lint --workspace=property-search-frontend

      - name: üß™ Run Tests
        # The job will now fail if any test fails.
        run: npm test --workspace=property-search-frontend -- --coverage --watchAll=false

      - name: üèóÔ∏è Build Frontend
        run: npm run build --workspace=property-search-frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_EMBEDDING_SERVICE_URL: http://localhost:8001

      - name: üìä Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-search-frontend/coverage/lcov.info
          flags: frontend

  # ==========================================
  # üîß Backend API Build & Test
  # ==========================================
  backend-test:
    name: üîß Backend API Tests
    runs-on: ubuntu-latest
    needs: setup # This job now depends on the setup job

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: ÔøΩ Download Source Code and Dependencies
        uses: actions/download-artifact@v3
        with:
          name: node-modules-and-code
          path: .

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # The 'npm ci' step is no longer needed here

      - name: üîç Lint Backend
        # The job will now fail if linting errors are found.
        # Use --workspace to target the specific package
        run: npm run lint --workspace=property-search-api

      - name: üß™ Run Tests
        # The job will now fail if any test fails.
        run: npm test --workspace=property-search-api -- --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key

      - name: üèóÔ∏è Build Backend
        run: npm run build --workspace=property-search-api

      - name: üìä Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-search-api/coverage/lcov.info
          flags: backend

  # ==========================================
  # ü§ñ AI Service Build & Test
  # ==========================================
  ai-service-test:
    name: ü§ñ AI Service Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./property-embedding-service

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort flake8

      - name: üîç Format Check
        # The job will now fail if code formatting issues are found.
        run: |
          black --check src/
          isort --check-only src/

      - name: üîç Lint Check
        # The job will now fail if linting errors are found.
        run: flake8 src/

      - name: üß™ Run Tests
        # The job will now fail if any test fails.
        run: pytest --cov=src --cov-report=xml

      - name: üìä Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-embedding-service/coverage.xml
          flags: ai-service

  # ==========================================
  # üß™ End-to-End Tests with Docker Compose
  # ==========================================
  e2e-tests:
    name: üß™ End-to-End Tests
    runs-on: ubuntu-latest
    # This job should only run after the individual service tests pass
    needs: [frontend-test, backend-test, ai-service-test]

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üìù Create .env file for Docker Compose
        run: |
          echo "POSTGRES_USER=moov" >> .env
          echo "POSTGRES_PASSWORD=moov123" >> .env
          echo "POSTGRES_DB=moov_db" >> .env
          echo "JWT_SECRET=a_test_secret_for_ci_that_is_long_enough" >> .env
          echo "FRONTEND_URL=http://localhost:3000" >> .env

      - name: üöÄ Start Full Application Stack
        run: docker-compose -f docker-compose.e2e.yml up -d --build

      - name: üìä Check Container Status
        run: |
          echo "=== Container Status ==="
          docker-compose -f docker-compose.e2e.yml ps
          echo ""
          echo "=== Container Health ==="
          for container in e2e-postgres e2e-redis e2e-api e2e-embedding e2e-frontend; do
            echo "--- $container ---"
            docker inspect --format='{{.State.Health.Status}}' $container 2>/dev/null || echo 'No health check'
          done

      - name: ‚è≥ Wait for Database to be Ready
        run: npx wait-on tcp:localhost:5432 --timeout 60000

      - name: ‚è≥ Wait for Redis to be Ready
        run: npx wait-on tcp:localhost:6379 --timeout 60000

      - name: ‚è≥ Wait for API to be Ready
        run: npx wait-on http://localhost:3001/health --timeout 120000

      - name: ‚è≥ Wait for AI Service to be Ready
        run: npx wait-on http://localhost:8001/health --timeout 120000

      - name: ‚è≥ Wait for Frontend to be Ready
        # This step is crucial. It waits until the frontend server is responding before running tests.
        run: npx wait-on http://localhost:3000 --timeout 180000 # 3 minute timeout

      - name: üîç Verify All Services
        run: |
          echo "=== Final Service Check ==="
          curl -f http://localhost:3001/health || echo "API health check failed"
          curl -f http://localhost:8001/health || echo "AI service health check failed"
          curl -f http://localhost:3000 || echo "Frontend health check failed"

      - name: üü¢ Setup Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install Frontend Dependencies
        run: npm ci --workspace=property-search-frontend

      - name: üåê Install Playwright Browsers
        run: npm exec --workspace=property-search-frontend playwright install --with-deps

      - name: üß™ Run Playwright E2E Tests
        run: npm run test:e2e --workspace=property-search-frontend
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: üìä Upload E2E Test Report
        if: always() # Always run this step to get reports even on failure
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: property-search-frontend/playwright-report/
          retention-days: 7

      - name: üìä Upload E2E Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            property-search-frontend/test-results/
            property-search-frontend/playwright-report/
          retention-days: 7

      - name: üê≥ Show Docker Logs (on failure)
        if: failure()
        run: |
          echo "=== Container Status ==="
          docker-compose -f docker-compose.e2e.yml ps
          echo ""
          echo "=== Frontend Logs ==="
          docker logs e2e-frontend --tail 50 2>&1 || echo "No frontend logs"
          echo ""
          echo "=== API Logs ==="
          docker logs e2e-api --tail 50 2>&1 || echo "No API logs"
          echo ""
          echo "=== Embedding Service Logs ==="
          docker logs e2e-embedding --tail 50 2>&1 || echo "No embedding service logs"
          echo ""
          echo "=== PostgreSQL Logs ==="
          docker logs e2e-postgres --tail 30 2>&1 || echo "No PostgreSQL logs"
          echo ""
          echo "=== Redis Logs ==="
          docker logs e2e-redis --tail 30 2>&1 || echo "No Redis logs"
          echo ""
          echo "=== Network Information ==="
          docker network ls
          echo ""
          echo "=== Port Information ==="
          netstat -tuln | grep -E ':(3000|3001|5432|6379|8001) ' || echo "No matching ports found"

      - name: üõë Stop Application Stack
        if: always() # Always run this step to clean up the runner
        run: docker-compose -f docker-compose.e2e.yml down

  # ==========================================
  # ÔøΩüê≥ Build & Push Production Images
  # ==========================================
  build-and-push-production:
    name: üê≥ Build & Push Production Images
    runs-on: ubuntu-latest
    # This job only runs on a push to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # It depends on all test jobs passing successfully
    needs: [setup, frontend-test, backend-test, ai-service-test, e2e-tests]

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to Docker Hub (or your registry)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üèóÔ∏è Build and Push API Image
        uses: docker/build-push-action@v4
        with:
          context: ./property-search-api
          file: ./property-search-api/Dockerfile.prod
          push: true
          tags: your-docker-repo/moov-api:latest, your-docker-repo/moov-api:${{ github.sha }}

      - name: üèóÔ∏è Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./property-search-frontend
          file: ./property-search-frontend/Dockerfile.prod
          push: true
          tags: your-docker-repo/moov-frontend:latest, your-docker-repo/moov-frontend:${{ github.sha }}

      - name: üèóÔ∏è Build and Push AI Service Image
        uses: docker/build-push-action@v4
        with:
          context: ./property-embedding-service
          file: ./property-embedding-service/Dockerfile.prod
          push: true
          tags: your-docker-repo/moov-embedding:latest, your-docker-repo/moov-embedding:${{ github.sha }}

  # ==========================================
  # üìä Performance & Lighthouse
  # ==========================================
  lighthouse:
    name: üìä Lighthouse Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [setup, frontend-test]

    steps:
      - name: ÔøΩ Download Source Code and Dependencies
        uses: actions/download-artifact@v3
        with:
          name: node-modules-and-code
          path: .

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # The 'npm ci' step is no longer needed here

      - name: üèóÔ∏è Build Frontend
        run: npm run build --workspace=property-search-frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_EMBEDDING_SERVICE_URL: http://localhost:8001

      - name: üöÄ Start Frontend
        run: npm start --workspace=property-search-frontend &
        env:
          PORT: 3000

      - name: ‚è≥ Wait for Frontend
        run: npx wait-on http://localhost:3000

      - name: üìä Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadDir: ./lighthouse-results
          configPath: ./lighthouserc.js
        continue-on-error: true

  # ==========================================
  # üöÄ Deploy to Staging
  # ==========================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [frontend-test, backend-test, ai-service-test, e2e-tests]
    environment: staging

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add staging deployment commands here
          echo "‚úÖ Staging deployment complete!"

  # ==========================================
  # üåü Deploy to Production
  # ==========================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      [
        frontend-test,
        backend-test,
        ai-service-test,
        e2e-tests,
        build-and-push-production,
      ]
    environment: production

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üåü Deploy to Production
        run: |
          echo "üåü Deploying to production environment..."
          # Add production deployment commands here
          echo "‚úÖ Production deployment complete!"

      - name: üì¢ Notify Team
        if: success()
        run: |
          echo "‚úÖ PropertySearch UK successfully deployed to production!"
          echo "üåê Frontend: https://propertysearch-uk.vercel.app"
          echo "üîå API: https://api.propertysearch-uk.railway.app"
