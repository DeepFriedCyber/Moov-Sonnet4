name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # ==========================================
  # 🔍 Code Quality & Security
  # ==========================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint Check
        run: npm run lint
        continue-on-error: true

      - name: 🛡️ Security Audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 📝 Type Check
        run: npm run type-check
        continue-on-error: true

  # ==========================================
  # 🏗️ Frontend Build & Test
  # ==========================================
  frontend-test:
    name: 🏗️ Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./property-search-frontend

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: property-search-frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint Frontend
        run: npm run lint
        continue-on-error: true

      - name: 🧪 Run Tests
        run: npm test -- --coverage --watchAll=false
        continue-on-error: true

      - name: 🏗️ Build Frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_EMBEDDING_SERVICE_URL: http://localhost:8001

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-search-frontend/coverage/lcov.info
          flags: frontend
        continue-on-error: true

  # ==========================================
  # 🔧 Backend API Build & Test
  # ==========================================
  backend-test:
    name: 🔧 Backend API Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./property-search-api

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: property-search-api/package-lock.json

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint Backend
        run: npm run lint
        continue-on-error: true

      - name: 🧪 Run Tests
        run: npm test -- --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key
        continue-on-error: true

      - name: 🏗️ Build Backend
        run: npm run build

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-search-api/coverage/lcov.info
          flags: backend
        continue-on-error: true

  # ==========================================
  # 🤖 AI Service Build & Test
  # ==========================================
  ai-service-test:
    name: 🤖 AI Service Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./property-embedding-service

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort flake8

      - name: 🔍 Format Check
        run: |
          black --check src/
          isort --check-only src/
        continue-on-error: true

      - name: 🔍 Lint Check
        run: flake8 src/
        continue-on-error: true

      - name: 🧪 Run Tests
        run: pytest --cov=src --cov-report=xml
        continue-on-error: true

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./property-embedding-service/coverage.xml
          flags: ai-service
        continue-on-error: true

  # ==========================================
  # 🐳 Docker Build & Test
  # ==========================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: 🏗️ Build and Test Docker Images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml config
        continue-on-error: true

  # ==========================================
  # 📊 Performance & Lighthouse
  # ==========================================
  lighthouse:
    name: 📊 Lighthouse Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [frontend-test]

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        working-directory: ./property-search-frontend
        run: npm ci

      - name: 🏗️ Build Frontend
        working-directory: ./property-search-frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_EMBEDDING_SERVICE_URL: http://localhost:8001

      - name: 🚀 Start Frontend
        working-directory: ./property-search-frontend
        run: npm start &
        env:
          PORT: 3000

      - name: ⏳ Wait for Frontend
        run: npx wait-on http://localhost:3000

      - name: 📊 Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadDir: ./lighthouse-results
          configPath: ./lighthouserc.js
        continue-on-error: true

  # ==========================================
  # 🚀 Deploy to Staging
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [frontend-test, backend-test, ai-service-test]
    environment: staging

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add staging deployment commands here
          echo "✅ Staging deployment complete!"

  # ==========================================
  # 🌟 Deploy to Production
  # ==========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [frontend-test, backend-test, ai-service-test, docker-build]
    environment: production

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to Production
        run: |
          echo "🌟 Deploying to production environment..."
          # Add production deployment commands here
          echo "✅ Production deployment complete!"

      - name: 📢 Notify Team
        if: success()
        run: |
          echo "✅ PropertySearch UK successfully deployed to production!"
          echo "🌐 Frontend: https://propertysearch-uk.vercel.app"
          echo "🔌 API: https://api.propertysearch-uk.railway.app"